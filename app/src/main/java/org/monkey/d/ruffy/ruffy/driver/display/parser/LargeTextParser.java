package org.monkey.d.ruffy.ruffy.driver.display.parser;

import org.monkey.d.ruffy.ruffy.driver.display.Symbol;
import org.monkey.d.ruffy.ruffy.driver.display.Token;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;

/**
 * Created by fishermen21 on 20.05.17.
 */

public class LargeTextParser {

    private static String[][] numbers = {
            {
                    "  ████  ",
                    " ██  ██ ",
                    "██    ██",
                    "██    ██",
                    "██    ██",
                    "██    ██",
                    "██    ██",
                    "██    ██",
                    "██    ██",
                    "██    ██",
                    "██    ██",
                    "██    ██",
                    "██    ██",
                    " ██  ██ ",
                    "  ████  "
            },
            {
                    "    ██  ",
                    "   ███  ",
                    "  ████  ",
                    "    ██  ",
                    "    ██  ",
                    "    ██  ",
                    "    ██  ",
                    "    ██  ",
                    "    ██  ",
                    "    ██  ",
                    "    ██  ",
                    "    ██  ",
                    "    ██  ",
                    "    ██  ",
                    "    ██  "
            },
            {
                    "  ████  ",
                    " ██  ██ ",
                    "██    ██",
                    "██    ██",
                    "      ██",
                    "      ██",
                    "     ██ ",
                    "    ██  ",
                    "   ██   ",
                    "  ██    ",
                    " ██     ",
                    "██      ",
                    "██      ",
                    "██      ",
                    "████████"
            },
            {
                    " █████  ",
                    "██   ██ ",
                    "      ██",
                    "      ██",
                    "      ██",
                    "     ██ ",
                    "   ███  ",
                    "     ██ ",
                    "      ██",
                    "      ██",
                    "      ██",
                    "      ██",
                    "      ██",
                    "██   ██ ",
                    " █████  "

            },
            {
                    "     ██ ",
                    "    ███ ",
                    "    ███ ",
                    "   ████ ",
                    "   █ ██ ",
                    "  ██ ██ ",
                    "  █  ██ ",
                    " ██  ██ ",
                    "██   ██ ",
                    "████████",
                    "     ██ ",
                    "     ██ ",
                    "     ██ ",
                    "     ██ ",
                    "     ██ "

            },
            {
                    "███████ ",
                    "██      ",
                    "██      ",
                    "██      ",
                    "██      ",
                    "██████  ",
                    "     ██ ",
                    "      ██",
                    "      ██",
                    "      ██",
                    "      ██",
                    "      ██",
                    "      ██",
                    "██   ██ ",
                    " █████  "
            },
            {
                    "    ███ ",
                    "   ██   ",
                    "  ██    ",
                    " ██     ",
                    " ██     ",
                    "██      ",
                    "██████  ",
                    "███  ██ ",
                    "██    ██",
                    "██    ██",
                    "██    ██",
                    "██    ██",
                    "██    ██",
                    " ██  ██ ",
                    "  ████  "
            },
            {
                    "████████",
                    "      ██",
                    "      ██",
                    "     ██ ",
                    "     ██ ",
                    "    ██  ",
                    "    ██  ",
                    "   ██   ",
                    "   ██   ",
                    "   ██   ",
                    "  ██    ",
                    "  ██    ",
                    "  ██    ",
                    "  ██    ",
                    "  ██    "
            },
            {
                    "  ████  ",
                    " ██  ██ ",
                    "██    ██",
                    "██    ██",
                    "██    ██",
                    " ██  ██ ",
                    "  ████  ",
                    " ██  ██ ",
                    "██    ██",
                    "██    ██",
                    "██    ██",
                    "██    ██",
                    "██    ██",
                    " ██  ██ ",
                    "  ████  "
            },
            {
                    "  ████  ",
                    " ██  ██ ",
                    "██    ██",
                    "██    ██",
                    "██    ██",
                    "██    ██",
                    " ██  ███",
                    "  ██████",
                    "      ██",
                    "     ██ ",
                    "     ██ ",
                    "    ██  ",
                    "    ██  ",
                    "   ██   ",
                    " ███    "
            }
    };

    private static Map<Character, String[]> letters = new HashMap<Character, String[]>();

    static {
        letters.put('E', new String[]{
                "████████",
                "██      ",
                "██      ",
                "██      ",
                "██      ",
                "██      ",
                "██      ",
                "███████ ",
                "██      ",
                "██      ",
                "██      ",
                "██      ",
                "██      ",
                "██      ",
                "████████"
        });
        letters.put('W', new String[]{
                "██      ██",
                "██      ██",
                "██      ██",
                "██      ██",
                "██  ██  ██",
                "██  ██  ██",
                "██  ██  ██",
                "██  ██  ██",
                "██  ██  ██",
                "██  ██  ██",
                "██  ██  ██",
                "██ ████ ██",
                "██████████",
                " ███  ███ ",
                "  █    █  "
        });
        letters.put('u', new String[]{
                "      ",
                "      ",
                "      ",
                "██  ██",
                "██  ██",
                "██  ██",
                "██  ██",
                "██  ██",
                "██  ██",
                "██  ██",
                "██  ██",
                "██  ██",
                "██  ██",
                "██  ██",
                " ████ "
        });
    }

    private static Map<Symbol, String[]> symbols = new HashMap<Symbol, String[]>();

    static {
        symbols.put(Symbol.LARGE_DOT, new String[]{
                "    ",
                "    ",
                "    ",
                "    ",
                "    ",
                "    ",
                "    ",
                "    ",
                "███ ",
                "███ ",
                "███ ",
                "    "
        });
        symbols.put(Symbol.LARGE_SEPERATOR, new String[]{
                "    ",
                "    ",
                "    ",
                "███ ",
                "███ ",
                "███ ",
                "    ",
                "    ",
                "███ ",
                "███ ",
                "███ ",
                "    ",
                "    ",
        });
        symbols.put(Symbol.LARGE_WARNING, new String[]{
                "       ██       ",
                "      ████      ",
                "      █  █      ",
                "     ██  ██     ",
                "     █    █     ",
                "    ██ ██ ██    ",
                "    █  ██  █    ",
                "   ██  ██  ██   ",
                "   █   ██   █   ",
                "  ██   ██   ██  ",
                "  █          █  ",
                " ██    ██    ██ ",
                " █            █ ",
                "████████████████",
                " ███████████████"
        });
        symbols.put(Symbol.LARGE_PERCENT, new String[]{
                " ██    ██",
                "████  ██ ",
                "████  ██ ",
                " ██  ██  ",
                "     ██  ",
                "    ██   ",
                "    ██   ",
                "   ██    ",
                "   ██    ",
                "  ██     ",
                "  ██  ██ ",
                " ██  ████",
                " ██  ████",
                "██    ██ ",
        });
        symbols.put(Symbol.LARGE_UNITS_PER_HOUR, new String[]{
                "██  ██    ██ ██    ",
                "██  ██    ██ ██    ",
                "██  ██    ██ ██    ",
                "██  ██   ██  ██    ",
                "██  ██   ██  █████ ",
                "██  ██   ██  ███ ██",
                "██  ██  ██   ██  ██",
                "██  ██  ██   ██  ██",
                "██  ██  ██   ██  ██",
                "██  ██ ██    ██  ██",
                "██  ██ ██    ██  ██",
                " ████  ██    ██  ██"
        });
        symbols.put(Symbol.LARGE_BASAL_SET, new String[]{
                "     ███████     ",
                "     ███████     ",
                "     ██ █ ██     ",
                "     ███ ████████",
                "     ██ █ ███████",
                "████████ █ █ █ ██",
                "███████ █ █ █ ███",
                "██ █ █ █ █ █ █ ██",
                "███ █ █ █ █ █ ███",
                "██ █ █ █ █ █ █ ██",
                "███ █ █ █ █ █ ███",
                "██ █ █ █ █ █ █ ██",
                "███ █ █ █ █ █ ███",
                "██ █ █ █ █ █ █ ██"
        });
        symbols.put(Symbol.LARGE_AMPULE_FULL, new String[]{
                "████████████████████    ",
                "████████████████████    ",
                "████████████████████ ███",
                "██████████████████████ █",
                "██████████████████████ █",
                "██████████████████████ █",
                "██████████████████████ █",
                "████████████████████ ███",
                "████████████████████    ",
                "████████████████████    "
        });
        symbols.put(Symbol.LARGE_AMPULE_LOW, new String[]{
                "████████████████████    ",
                "█      █  █  █  ████    ",
                "█      █  █  █  ████ ███",
                "█               ██████ █",
                "█               ██████ █",
                "█               ██████ █",
                "█               ██████ █",
                "█               ████ ███",
                "█               ████    ",
                "████████████████████    "
        });
        symbols.put(Symbol.LARGE_AMPULE_LOW, new String[]{
                "████████████████████    ",
                "█      █  █  █  █  █    ",
                "█      █  █  █  █  █ ███",
                "█                  ███ █",
                "█                    █ █",
                "█                    █ █",
                "█                  ███ █",
                "█                  █ ███",
                "█                  █    ",
                "████████████████████    "
        });
        symbols.put(Symbol.LARGE_ARROW, new String[]{
                "        ██      ",
                "        ███     ",
                "        ████    ",
                "        █████   ",
                "        ██████  ",
                "███████████████ ",
                "████████████████",
                "████████████████",
                "███████████████ ",
                "        ██████  ",
                "        █████   ",
                "        ████    ",
                "        ███     ",
                "        ██      "
        });
        symbols.put(Symbol.LARGE_EXTENDED_BOLUS, new String[]{
                "█████████████   ",
                "█████████████   ",
                "██         ██   ",
                "██         ██   ",
                "██         ██   ",
                "██         ██   ",
                "██         ██   ",
                "██         ██   ",
                "██         ██   ",
                "██         ██   ",
                "██         ██   ",
                "██         ██   ",
                "██         █████",
                "██         █████"
        });
        symbols.put(Symbol.LARGE_MULTIWAVE, new String[]{
                "██████          ",
                "██████          ",
                "██  ██          ",
                "██  ██          ",
                "██  ██          ",
                "██  ██          ",
                "██  ████████████",
                "██  ████████████",
                "██            ██",
                "██            ██",
                "██            ██",
                "██            ██",
                "██            ██",
                "██            ██"
        });
        symbols.put(Symbol.LARGE_BOLUS, new String[]{
                "   ██████      ",
                "   ██████      ",
                "   ██  ██      ",
                "   ██  ██      ",
                "   ██  ██      ",
                "   ██  ██      ",
                "   ██  ██      ",
                "   ██  ██      ",
                "   ██  ██      ",
                "   ██  ██      ",
                "   ██  ██      ",
                "   ██  ██      ",
                "   ██  ██      ",
                "█████  ████████",
                "█████  ████████"
        });
        symbols.put(Symbol.LARGE_MULTIWAVE_BOLUS, new String[]{
                "██████         ",
                "██████         ",
                "██  ██         ",
                "██  ██         ",
                "██  ██         ",
                "██  ██         ",
                "██  ██ ██ ██ ██",
                "██  ██ ██ ██ ██",
                "██             ",
                "██           ██",
                "██           ██",
                "██             ",
                "██           ██",
                "██           ██"
        });
        symbols.put(Symbol.LARGE_STOP, new String[]{
                "    ████████    ",
                "   ██████████   ",
                "  ████████████  ",
                " ██████████████ ",
                "████████████████",
                "█  █   █   █  ██",
                "█ ███ ██ █ █ █ █",
                "█  ██ ██ █ █  ██",
                "██ ██ ██ █ █ ███",
                "█  ██ ██   █ ███",
                "████████████████",
                " ██████████████ ",
                "  ████████████  ",
                "   ██████████   ",
                "    ████████    "
        });
        symbols.put(Symbol.LARGE_CALENDAR, new String[]{
                "       █████     ",
                "      █     █    ",
                "██████   █   █   ",
                "█   █    █    █  ",
                "█████    █    █  ",
                "█ █ █    ███  █  ",
                "█████            ",
                "█ █ █     ███████",
                "██████    █     █",
                "█ █ █ █   █    ██",
                "█████████ █   █ █",
                "█ █ █ █ █ ██ █  █",
                "█████████ █ █   █",
                " ████████ ███████"
        });
        symbols.put(Symbol.LARGE_TBR, new String[]{
                "     ███████        ██    ██",
                "     ███████       ████  ██ ",
                "     ██   ██       ████  ██ ",
                "     ██   ███████   ██  ██  ",
                "     ██   ███████       ██  ",
                "███████   ██   ██      ██   ",
                "███████   ██   ██      ██   ",
                "██   ██   ██   ██     ██    ",
                "██   ██   ██   ██     ██    ",
                "██   ██   ██   ██    ██     ",
                "██   ██   ██   ██    ██  ██ ",
                "██   ██   ██   ██   ██  ████",
                "██   ██   ██   ██   ██  ████",
                "██   ██   ██   ██  ██    ██ "
        });
        symbols.put(Symbol.LARGE_BASAL, new String[]{
                "     ███████     ",
                "     ███████     ",
                "     ██   ██     ",
                "     ██   ███████",
                "     ██   ███████",
                "███████   ██   ██",
                "███████   ██   ██",
                "██   ██   ██   ██",
                "██   ██   ██   ██",
                "██   ██   ██   ██",
                "██   ██   ██   ██",
                "██   ██   ██   ██",
                "██   ██   ██   ██",
                "██   ██   ██   ██"
        });
        symbols.put(Symbol.LARGE_PUMP_SETTINGS, new String[]{
                "███████████       ",
                "███████████       ",
                "████████████      ",
                "██       ███      ",
                "██       ████     ",
                "█████████████     ",
                "██       ██████   ",
                "███████████████ ██",
                "███████████████  █",
                "                ██",
                "           █   █ █",
                "           ██ █  █",
                "           █ █   █",
                "           ███████"
        });
        symbols.put(Symbol.LARGE_PUMP_SETTINGS, new String[]{
                "███████████       ",
                "███████████       ",
                "████████████      ",
                "██       ███      ",
                "██       ████     ",
                "█████████████     ",
                "██       ██████   ",
                "███████████████ ██",
                "███████████████  █",
                "                ██",
                "           █   █ █",
                "           ██ █  █",
                "           █ █   █",
                "           ███████"
        });
        symbols.put(Symbol.LARGE_THERAPIE_SETTINGS, new String[]{
                "   ████        ",
                "   █  █        ",
                "   █  █        ",
                "████  ████     ",
                "█        █     ",
                "█        █     ",
                "████  ████     ",
                "   █  █        ",
                "   █  █ ███████",
                "   ████ █     █",
                "        █    ██",
                "        █   █ █",
                "        ██ █  █",
                "        █ █   █",
                "        ███████"
        });
        symbols.put(Symbol.LARGE_BLUETOOTH_SETTINGS, new String[]{
                "  ██████       ",
                " ███ ████      ",
                " ███  ███      ",
                "████ █ ███     ",
                "████ ██ ██     ",
                "██ █ █ ███     ",
                "███   ████     ",
                "████ ██        ",
                "███   █ ███████",
                "██ █ █  █     █",
                "████ ██ █    ██",
                "████ █  █   █ █",
                " ███  █ ██ █  █",
                " ███ ██ █ █   █",
                "  █████ ███████"
        });
        symbols.put(Symbol.LARGE_MENU_SETTINGS, new String[]{
                "   █████████ ",
                "   █       █ ",
                "   █       █ ",
                "█████████  █ ",
                "█████████  █ ",
                "█████████  █ ",
                "█████████  █ ",
                "█████        ",
                "█████ ███████",
                "█████ █     █",
                "█████ █    ██",
                "█████ █   █ █",
                "█████ ██ █  █",
                "█████ █ █   █",
                "      ███████"
        });
        symbols.put(Symbol.LARGE_MY_DATA, new String[]{
                "       ████   ",
                "      ██████  ",
                "     ████████ ",
                "     ██    ██ ",
                "            █ ",
                "███████     █ ",
                "█     █    █  ",
                "█ ███ █ ███   ",
                "█     █       ",
                "█ ███ █ ████  ",
                "█     █ █████ ",
                "█     █ ██████",
                "███████ ██████"
        });
        symbols.put(Symbol.LARGE_ALARM_SETTINGS, new String[]{
                "      █          ",
                "     █ █         ",
                "     ███         ",
                "    █ █ █        ",
                "   █   █ █       ",
                "   █  █ ██       ",
                "   █   █ █       ",
                "   █  █ █        ",
                "  █    █  ███████",
                "  █   █ █ █     █",
                " █     █  █    ██",
                "█████████ █   █ █",
                "     ███  ██ █  █",
                "      █   █ █   █",
                "          ███████"

        });
        symbols.put(Symbol.LARGE_CHECK, new String[]{
                "            ███",
                "           ███ ",
                "          ███  ",
                "         ███   ",
                "███     ███    ",
                " ███   ███     ",
                "  ███ ███      ",
                "   █████       ",
                "    ███        ",
                "     █         "

        });
        symbols.put(Symbol.LARGE_ERROR, new String[]{
                "     █████     ",
                "   █████████   ",
                "  ███████████  ",
                " ███ █████ ███ ",
                " ██   ███   ██ ",
                "████   █   ████",
                "█████     █████",
                "██████   ██████",
                "█████     █████",
                "████   █   ████",
                " ██   ███   ██ ",
                " ███ █████ ███ ",
                "  ███████████  ",
                "   █████████   ",
                "     █████     "

        });
    }

    private static LinkedList<Pattern> pattern = new LinkedList<>();
    static
    {
        for(Symbol s : Symbol.values())
        {
            if(symbols.containsKey(s)) {
                String[] patternString = symbols.get(s);
                Pattern p = new SymbolPattern(s, patternString, 16);
                pattern.add(p);
            }
        }
        for(int i = 0; i < 10;i++)
        {
            String[] patternString = numbers[i];
            Pattern p = new NumberPattern(i,patternString,16);
            pattern.add(p);
        }
        for(Character c : letters.keySet())
        {
            String[] patternString = letters.get(c);
            Pattern p = new CharacterPattern(c,patternString,16);
            pattern.add(p);
        }
    }

    public static Token findToken(byte[][] display, int which, int x) {
        for(Pattern p : pattern)
        {
            Token t = p.match(display, which, x);
            if (t != null)
                return t;
        }
        return null;
    }
}